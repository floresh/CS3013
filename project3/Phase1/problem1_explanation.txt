Heric Flores-Huerta, Robyn Domanico
Project 3, Part 1 explanation

For our cluster simulation, all threads are created and loaded into their respective queues. This means that at the beginning the cluster will run 4 Top Secret jobs first, but the cluster scheduling then evens out once the >3 Top Secret jobs condition is satisfied.
When the cluster does not already rely on a preexisting condition (e.g the cluster already has one job in it, in which case the cluster will try to fill the empty half with a similar job and process the two), a lottery system is used: 20 tickets are given, with ticket numbers 0-7 meaning that an unclassified job will be selected, and 8-19 meaning that a classified job will be selected. This ensures all jobs will be able to go.
If the cluster is going to take classified jobs, it checks whether there are more secret jobs compared to top secret jobs, and vice versa. It will take jobs from the queue that is largest at the time, or if there are only 1-2 jobs between the secret and top secret queues, it will take what it can.
If a lottery number is pulled for a classified job where there are none remaining (or vice versa), the cluster will take unclassified jobs instead, provided that there are unclassified jobs waiting.
After a thread has finished in the cluster, it is set aside and waits for 10-15 seconds. After this time has elapsed, the thread marks itself as ready to requeue. The main function checks for these available threads, and sets them back in the cluster. The 10-15 seconds ensures that jobs are not returning to the queue too quickly, creating scenarios that starve other jobs types of runtime (e.g always running top secret jobs as there are always 3 or more). The wait time also allows time for several jobs to run, so that even if one job type has been getting more lottery tickets, the other job type will have a chance.